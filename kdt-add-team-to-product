#!/bin/bash

set -e          # causes the script to exit immediately if any command exits with a non-zero status
set -u          # prevents the script from using unset variables
set -o pipefail # exit status of the entire pipeline is the exit status of the last command that failed

if [[ $# -ne 2 ]]; then
  echo "usage: $0 <team_name> <product_name>"
  exit 1
fi

team=$1
prod_name=$2

echo "$(date):INFO:getting project list for team $team ..."
team_projects_file="team_${team}_projects.lst"
kdt-get-projects "$team" > "$team_projects_file"
echo "$(date):INFO:got $(wc -l < $team_projects_file) projects for team $team"

prod_id=$(kdt-get-product-id "$prod_name")
if [[ $? -ne 0 ]] || [[ -z $prod_id ]] || [[ $prod_id == "null" ]]; then
    echo "$(date):warn: product $prod_name not found, will be created"
    kdt-create-product "$prod_name" "$team_projects_file"
else
    echo "$(date):INFO:product $prod_name found, id $prod_id"
    echo "$(date):INFO:getting existing projects for product $prod_name ..."

    existing_proj_file="prod_${prod_name}_projects.lst"
    kdt-get-product-projects "$prod_id" > "$existing_proj_file"
    echo "$(date):INFO:got $(wc -l < "$existing_proj_file") projects for product $prod_name"
    cat "$team_projects_file" >> "$existing_proj_file" 
    cat "$existing_proj_file" | sort -u -o "new_${existing_proj_file}"

    echo "$(date):INFO:adding projects to product $prod_name ..."
    kdt-add-projects-to-product "new_${existing_proj_file}" "$prod_id"
fi


